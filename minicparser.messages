prog: IDENT IDENT EQ BRAO ADDRESS WHILE
##
## Ends in an error in state: 35.
##
## address -> ADDRESS . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## ADDRESS
##

Unexpected statement inside an expression

prog: IDENT IDENT EQ BRAO BRAC WHILE
##
## Ends in an error in state: 104.
##
## glob_var -> struct_decl opt_init_list . SEMI [ TYPE IDENT ]
##
## The known suffix of the stack is as follows:
## struct_decl opt_init_list
##

Expected ';' after statement.

prog: IDENT IDENT EQ BRAO IDENT DOT WHILE
##
## Ends in an error in state: 90.
##
## struct_access -> IDENT DOT . IDENT [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## IDENT DOT
##

Expecting an identifier after '.'.

prog: IDENT IDENT EQ BRAO IDENT PARO TRUE COMMA WHILE
##
## Ends in an error in state: 85.
##
## args -> expr COMMA . args [ PARC ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Arguments of a function must be an expression

prog: IDENT IDENT EQ BRAO IDENT PARO TRUE WHILE
##
## Ends in an error in state: 58.
##
## add -> expr . PLUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## and_op -> expr . AND expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## args -> expr . [ PARC ]
## args -> expr . COMMA args [ PARC ]
## div -> expr . BY expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## eq -> expr . EQEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## geq -> expr . GEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## gth -> expr . GTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## leq -> expr . LEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## lth -> expr . LTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## mod_op -> expr . MOD expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## mul -> expr . TIMES expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## neq -> expr . NEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## or_op -> expr . OR expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
## sub -> expr . MINUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY AND ]
##
## The known suffix of the stack is as follows:
## expr
##

Unexpected statement inside of an expression.

prog: IDENT IDENT EQ BRAO IDENT PARO WHILE
##
## Ends in an error in state: 32.
##
## call -> IDENT PARO . args_opt PARC [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## IDENT PARO
##

Arguments of a function must be expressions.

prog: IDENT IDENT EQ BRAO IDENT WHILE
##
## Ends in an error in state: 31.
##
## call -> IDENT . PARO args_opt PARC [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## get -> IDENT . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## struct_access -> IDENT . DOT IDENT [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Unexpected instruction inside of an expression.

prog: IDENT IDENT EQ BRAO MINUS TRUE WHILE
##
## Ends in an error in state: 92.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neg -> MINUS expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## MINUS expr
##

Unexpected statement inside an expression.

prog: IDENT IDENT EQ BRAO MINUS WHILE
##
## Ends in an error in state: 30.
##
## neg -> MINUS . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Expecting an expression after '-';

prog: IDENT IDENT EQ BRAO NOT WHILE
##
## Ends in an error in state: 29.
##
## not -> NOT . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

Expecting an expression after operator '!'.

prog: IDENT IDENT EQ BRAO PARO TRUE WHILE
##
## Ends in an error in state: 94.
##
## add -> expr . PLUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## expr -> PARO expr . PARC [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## leq -> expr . LEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## sub -> expr . MINUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
##
## The known suffix of the stack is as follows:
## PARO expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO PARO WHILE
##
## Ends in an error in state: 28.
##
## expr -> PARO . expr PARC [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## PARO
##

Unexpected instruction inside of an expression.

prog: IDENT IDENT EQ BRAO TIMES WHILE
##
## Ends in an error in state: 27.
##
## deref -> TIMES . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## TIMES
##

Expecting an expression after operator '*'.

prog: IDENT IDENT EQ BRAO TRUE AND TRUE WHILE
##
## Ends in an error in state: 84.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr AND expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IDENT IDENT EQ BRAO TRUE AND WHILE
##
## Ends in an error in state: 83.
##
## and_op -> expr AND . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IDENT IDENT EQ BRAO TRUE BY WHILE
##
## Ends in an error in state: 65.
##
## div -> expr BY . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr BY
##

Missing right operand in binary expression.

prog: IDENT IDENT EQ BRAO TRUE COMMA WHILE
##
## Ends in an error in state: 101.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ BRAC ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Unexpected instruction inside of a list of expressions.

prog: IDENT IDENT EQ BRAO TRUE EQEQ TRUE WHILE
##
## Ends in an error in state: 82.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr EQEQ expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr EQEQ expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO TRUE EQEQ WHILE
##
## Ends in an error in state: 81.
##
## eq -> expr EQEQ . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr EQEQ
##

Unexpected instruction inside of an expression.

prog: IDENT IDENT EQ BRAO TRUE GEQ TRUE WHILE
##
## Ends in an error in state: 80.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr GEQ expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr GEQ expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO TRUE GEQ WHILE
##
## Ends in an error in state: 79.
##
## geq -> expr GEQ . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr GEQ
##

Unexpected instruction inside of an expression.

prog: IDENT IDENT EQ BRAO TRUE GTH TRUE WHILE
##
## Ends in an error in state: 78.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr GTH expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr GTH expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO TRUE GTH WHILE
##
## Ends in an error in state: 77.
##
## gth -> expr GTH . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr GTH
##

Unexpected instruction inside of an expression.

prog: IDENT IDENT EQ BRAO TRUE LEQ TRUE WHILE
##
## Ends in an error in state: 76.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr LEQ expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr LEQ expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO TRUE LEQ WHILE
##
## Ends in an error in state: 75.
##
## leq -> expr LEQ . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr LEQ
##

Binary operator expecting a right operand.

prog: IDENT IDENT EQ BRAO TRUE LTH TRUE WHILE
##
## Ends in an error in state: 74.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr LTH expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr LTH expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO TRUE LTH WHILE
##
## Ends in an error in state: 73.
##
## lth -> expr LTH . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr LTH
##

Missing right operand on a binary operator.

prog: IDENT IDENT EQ BRAO TRUE MINUS TRUE WHILE
##
## Ends in an error in state: 72.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr MINUS expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

Unexpected statement inside an expression.

prog: IDENT IDENT EQ BRAO TRUE MINUS WHILE
##
## Ends in an error in state: 71.
##
## sub -> expr MINUS . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

Missing right operand on binary expression.

prog: IDENT IDENT EQ BRAO TRUE MOD WHILE
##
## Ends in an error in state: 63.
##
## mod_op -> expr MOD . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IDENT IDENT EQ BRAO TRUE NEQ TRUE WHILE
##
## Ends in an error in state: 70.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr NEQ expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO TRUE NEQ WHILE
##
## Ends in an error in state: 69.
##
## neq -> expr NEQ . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

Expecting expression as right operand of a binary operator.

prog: IDENT IDENT EQ BRAO TRUE OR TRUE WHILE
##
## Ends in an error in state: 68.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr OR expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IDENT IDENT EQ BRAO TRUE OR WHILE
##
## Ends in an error in state: 67.
##
## or_op -> expr OR . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IDENT IDENT EQ BRAO TRUE PLUS TRUE WHILE
##
## Ends in an error in state: 62.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## add -> expr PLUS expr . [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO TRUE PLUS WHILE
##
## Ends in an error in state: 61.
##
## add -> expr PLUS . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

Expecting expression as right operand of a binary operator.

prog: IDENT IDENT EQ BRAO TRUE TIMES WHILE
##
## Ends in an error in state: 59.
##
## mul -> expr TIMES . expr [ TIMES SEMI PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

Expecting expression as right operand of a binary operator.

prog: IDENT IDENT EQ BRAO TRUE WHILE
##
## Ends in an error in state: 100.
##
## add -> expr . PLUS expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## and_op -> expr . AND expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## div -> expr . BY expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## eq -> expr . EQEQ expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## geq -> expr . GEQ expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## gth -> expr . GTH expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## leq -> expr . LEQ expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## lth -> expr . LTH expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## mod_op -> expr . MOD expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## mul -> expr . TIMES expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## neq -> expr . NEQ expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## or_op -> expr . OR expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
## separated_nonempty_list(COMMA,expr) -> expr . [ BRAC ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ BRAC ]
## sub -> expr . MINUS expr [ TIMES PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ COMMA BY BRAC AND ]
##
## The known suffix of the stack is as follows:
## expr
##

Expecting ';' after an assignment.

prog: IDENT IDENT EQ BRAO WHILE
##
## Ends in an error in state: 25.
##
## option(__anonymous_2) -> EQ BRAO . loption(separated_nonempty_list(COMMA,expr)) BRAC [ SEMI ]
##
## The known suffix of the stack is as follows:
## EQ BRAO
##

Unexpected instruction inside an initializer list.

prog: IDENT IDENT EQ WHILE
##
## Ends in an error in state: 24.
##
## option(__anonymous_2) -> EQ . BRAO loption(separated_nonempty_list(COMMA,expr)) BRAC [ SEMI ]
##
## The known suffix of the stack is as follows:
## EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IDENT IDENT WHILE
##
## Ends in an error in state: 23.
##
## glob_var -> struct_decl . opt_init_list SEMI [ TYPE IDENT ]
##
## The known suffix of the stack is as follows:
## struct_decl
##

Expecting ';' after variable declaration.

prog: IDENT WHILE
##
## Ends in an error in state: 10.
##
## struct_decl -> IDENT . IDENT [ SEMI PARO EQ ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Unexepected instruction outside of function body.

prog: STRUCT IDENT BRAO TYPE IDENT SEMI BRAC SEMI WHILE
##
## Ends in an error in state: 195.
##
## list(struct_def) -> struct_def . list(struct_def) [ TYPE IDENT ]
##
## The known suffix of the stack is as follows:
## struct_def
##

Unexpected statement after a struct definition

prog: STRUCT IDENT BRAO TYPE IDENT SEMI BRAC WHILE
##
## Ends in an error in state: 13.
##
## struct_def -> STRUCT IDENT BRAO struct_type_decls BRAC . SEMI [ TYPE STRUCT IDENT ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT BRAO struct_type_decls BRAC
##

Expecting a ';' after a struct definition.

prog: STRUCT IDENT BRAO TYPE IDENT SEMI WHILE
##
## Ends in an error in state: 16.
##
## nonempty_list(__anonymous_1) -> struct_type_decl SEMI . [ BRAC ]
## nonempty_list(__anonymous_1) -> struct_type_decl SEMI . nonempty_list(__anonymous_1) [ BRAC ]
##
## The known suffix of the stack is as follows:
## struct_type_decl SEMI
##

Only declarations are authorized inside a struct definition.

prog: STRUCT IDENT BRAO TYPE IDENT WHILE
##
## Ends in an error in state: 15.
##
## nonempty_list(__anonymous_1) -> struct_type_decl . SEMI [ BRAC ]
## nonempty_list(__anonymous_1) -> struct_type_decl . SEMI nonempty_list(__anonymous_1) [ BRAC ]
##
## The known suffix of the stack is as follows:
## struct_type_decl
##

Expecting a ';' after a memeber declaration;

prog: STRUCT IDENT BRAO WHILE
##
## Ends in an error in state: 3.
##
## struct_def -> STRUCT IDENT BRAO . struct_type_decls BRAC SEMI [ TYPE STRUCT IDENT ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT BRAO
##

Only declarations are authorized inside a struct definition.

prog: STRUCT IDENT WHILE
##
## Ends in an error in state: 2.
##
## struct_def -> STRUCT IDENT . BRAO struct_type_decls BRAC SEMI [ TYPE STRUCT IDENT ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT
##

Expecting a '{' after struct declaration.

prog: STRUCT WHILE
##
## Ends in an error in state: 1.
##
## struct_def -> STRUCT . IDENT BRAO struct_type_decls BRAC SEMI [ TYPE STRUCT IDENT ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Identifier expected after 'struct'.

prog: TYPE IDENT EQ CONST WHILE
##
## Ends in an error in state: 179.
##
## glob_var -> decl opt_const . SEMI [ TYPE IDENT ]
##
## The known suffix of the stack is as follows:
## decl opt_const
##

Missing ';' after global variable assignment.

prog: TYPE IDENT EQ WHILE
##
## Ends in an error in state: 151.
##
## opt_const -> EQ . CONST [ SEMI ]
##
## The known suffix of the stack is as follows:
## EQ
##

Global assignment expects an expression after '='.

prog: TYPE IDENT SEMI IDENT IDENT WHILE
##
## Ends in an error in state: 172.
##
## glob_var -> struct_decl . opt_init_list SEMI [ TYPE IDENT ]
## struct_type_decl -> struct_decl . [ PARO ]
##
## The known suffix of the stack is as follows:
## struct_decl
##

Expecting ';' after variable declaration.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO CONST SEMI BRAC TYPE IDENT WHILE
##
## Ends in an error in state: 95.
##
## func -> struct_type_decl . PARO params_opt PARC BRAO body BRAC [ TYPE IDENT EOF ]
##
## The known suffix of the stack is as follows:
## struct_type_decl
##

Missing '(' after function declaration.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO CONST SEMI BRAC WHILE
##
## Ends in an error in state: 174.
##
## funcs -> funcs . func [ TYPE IDENT EOF ]
## prog -> structs glob_vars funcs . EOF [ # ]
##
## The known suffix of the stack is as follows:
## structs glob_vars funcs
##

Unexpected statement outside of a function body.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT DOT IDENT EQ TRUE WHILE
##
## Ends in an error in state: 145.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## set_struct_member -> struct_access EQ expr . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
##
## The known suffix of the stack is as follows:
## struct_access EQ expr
##

Expecting ';' at the end of the instruction

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT DOT IDENT EQ WHILE
##
## Ends in an error in state: 144.
##
## set_struct_member -> struct_access EQ . expr SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## struct_access EQ
##

Expecting an expression on right side of the assignment operator

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT DOT IDENT WHILE
##
## Ends in an error in state: 143.
##
## expr -> struct_access . [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## set_struct_member -> struct_access . EQ expr SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## struct_access
##

Expecting ';' at the end of an instruction.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT EQ BRAO BRAC WHILE
##
## Ends in an error in state: 135.
##
## set_struct -> IDENT EQ init_list . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IDENT EQ init_list
##

Expecting ';' after struct assignment.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT EQ BRAO WHILE
##
## Ends in an error in state: 132.
##
## init_list -> BRAO . loption(separated_nonempty_list(COMMA,expr)) BRAC [ SEMI ]
##
## The known suffix of the stack is as follows:
## BRAO
##

Unexpected instruction inside an initializer list.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT EQ TRUE WHILE
##
## Ends in an error in state: 137.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## set -> IDENT EQ expr . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
##
## The known suffix of the stack is as follows:
## IDENT EQ expr
##

Missing ';' at the end of a variable assignment.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT EQ WHILE
##
## Ends in an error in state: 131.
##
## set -> IDENT EQ . expr SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## set_struct -> IDENT EQ . init_list SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IDENT EQ
##

Expecting an expression after '='.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT IDENT EQ BRAO BRAC WHILE
##
## Ends in an error in state: 141.
##
## local -> struct_decl opt_init_list . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## struct_decl opt_init_list
##

Expecting a ';' after variable declaration.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT IDENT WHILE
##
## Ends in an error in state: 140.
##
## local -> struct_decl . opt_init_list SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## struct_decl
##

Expecting a ';' after variable declaration.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IDENT WHILE
##
## Ends in an error in state: 130.
##
## call -> IDENT . PARO args_opt PARC [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## get -> IDENT . [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## set -> IDENT . EQ expr SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## set_struct -> IDENT . EQ init_list SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## struct_access -> IDENT . DOT IDENT [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ EQ BY AND ]
## struct_decl -> IDENT . IDENT [ SEMI EQ ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Identifier is expected to be followed by ';' or '(' or '=' or a binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO TRUE PARC BRAO STRUCT
##
## Ends in an error in state: 129.
##
## ifi -> IF PARO expr PARC BRAO . body BRAC ELSE BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF PARO expr PARC BRAO
##

Missing left operand on a binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO TRUE PARC BRAO TRUE SEMI BRAC ELSE BRAO STRUCT
##
## Ends in an error in state: 170.
##
## ifi -> IF PARO expr PARC BRAO body BRAC ELSE BRAO . body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF PARO expr PARC BRAO body BRAC ELSE BRAO
##

Missing left operand on a binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO TRUE PARC BRAO TRUE SEMI BRAC ELSE BRAO TRUE SEMI STRUCT
##
## Ends in an error in state: 171.
##
## body -> body . instr [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## body -> body . local [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## ifi -> IF PARO expr PARC BRAO body BRAC ELSE BRAO body . BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF PARO expr PARC BRAO body BRAC ELSE BRAO body
##

Missing left operand on a binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO TRUE PARC BRAO TRUE SEMI BRAC ELSE WHILE
##
## Ends in an error in state: 169.
##
## ifi -> IF PARO expr PARC BRAO body BRAC ELSE . BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF PARO expr PARC BRAO body BRAC ELSE
##

Missing '{' after 'else' statement.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO TRUE PARC BRAO TRUE SEMI BRAC WHILE
##
## Ends in an error in state: 168.
##
## ifi -> IF PARO expr PARC BRAO body BRAC . ELSE BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF PARO expr PARC BRAO body BRAC
##

Missing 'else' statement.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO TRUE PARC BRAO TRUE SEMI STRUCT
##
## Ends in an error in state: 167.
##
## body -> body . instr [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## body -> body . local [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## ifi -> IF PARO expr PARC BRAO body . BRAC ELSE BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF PARO expr PARC BRAO body
##

Missing left operand on a binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO TRUE PARC WHILE
##
## Ends in an error in state: 128.
##
## ifi -> IF PARO expr PARC . BRAO body BRAC ELSE BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF PARO expr PARC
##

Missing '{' after if condition.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO TRUE WHILE
##
## Ends in an error in state: 127.
##
## add -> expr . PLUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## geq -> expr . GEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## ifi -> IF PARO expr . PARC BRAO body BRAC ELSE BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## leq -> expr . LEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## sub -> expr . MINUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
##
## The known suffix of the stack is as follows:
## IF PARO expr
##

Unexpected statement inside of an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF PARO WHILE
##
## Ends in an error in state: 126.
##
## ifi -> IF PARO . expr PARC BRAO body BRAC ELSE BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF PARO
##

if condition should be an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO IF WHILE
##
## Ends in an error in state: 125.
##
## ifi -> IF . PARO expr PARC BRAO body BRAC ELSE BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## IF
##

Missing '(' after if statement.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO PUTCHAR PARO TRUE PARC WHILE
##
## Ends in an error in state: 123.
##
## putchar -> PUTCHAR PARO expr PARC . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## PUTCHAR PARO expr PARC
##

Missing ';' after function call.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO PUTCHAR PARO TRUE WHILE
##
## Ends in an error in state: 122.
##
## add -> expr . PLUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## geq -> expr . GEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## leq -> expr . LEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## putchar -> PUTCHAR PARO expr . PARC SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## sub -> expr . MINUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
##
## The known suffix of the stack is as follows:
## PUTCHAR PARO expr
##

Unexpected statement inside of an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO PUTCHAR PARO WHILE
##
## Ends in an error in state: 121.
##
## putchar -> PUTCHAR PARO . expr PARC SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## PUTCHAR PARO
##

'putchar' expects an expression as argument.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO PUTCHAR WHILE
##
## Ends in an error in state: 120.
##
## putchar -> PUTCHAR . PARO expr PARC SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## PUTCHAR
##

Missing '(' after puthcar call.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO RETURN TRUE WHILE
##
## Ends in an error in state: 118.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## returni -> RETURN expr . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##

Missing ';' after return statement.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO RETURN WHILE
##
## Ends in an error in state: 117.
##
## returni -> RETURN . expr SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## RETURN
##

'return' expects an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO STRUCT
##
## Ends in an error in state: 111.
##
## func -> struct_type_decl PARO params_opt PARC BRAO . body BRAC [ TYPE IDENT EOF ]
##
## The known suffix of the stack is as follows:
## struct_type_decl PARO params_opt PARC BRAO
##

Missing left operand on a binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO TIMES CONST EQ TRUE WHILE
##
## Ends in an error in state: 160.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## set_ptr_val -> deref EQ expr . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
##
## The known suffix of the stack is as follows:
## deref EQ expr
##

Unexpected statement inside an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO TIMES CONST EQ WHILE
##
## Ends in an error in state: 159.
##
## set_ptr_val -> deref EQ . expr SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## deref EQ
##

Expecting an expression after the assignment operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO TIMES CONST WHILE
##
## Ends in an error in state: 158.
##
## expr -> deref . [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## set_ptr_val -> deref . EQ expr SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## deref
##

Unexpected statement inside an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO TRUE SEMI STRUCT
##
## Ends in an error in state: 177.
##
## body -> body . instr [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## body -> body . local [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## func -> struct_type_decl PARO params_opt PARC BRAO body . BRAC [ TYPE IDENT EOF ]
##
## The known suffix of the stack is as follows:
## struct_type_decl PARO params_opt PARC BRAO body
##

Missing left operand on binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO TRUE WHILE
##
## Ends in an error in state: 156.
##
## add -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## geq -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## instr -> expr . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## leq -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## sub -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
##
## The known suffix of the stack is as follows:
## expr
##

Unexpected statement inside of an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO TYPE IDENT EQ CONST WHILE
##
## Ends in an error in state: 165.
##
## local -> decl opt_const . SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## decl opt_const
##

Missing ';' at the end of a local declaration.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO TYPE IDENT WHILE
##
## Ends in an error in state: 162.
##
## local -> decl . opt_const SEMI [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## decl
##

';' or '=' expected after local declaration

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO WHILE PARO TRUE PARC BRAO STRUCT
##
## Ends in an error in state: 116.
##
## whilei -> WHILE PARO expr PARC BRAO . body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## WHILE PARO expr PARC BRAO
##

Missing left operand on binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO WHILE PARO TRUE PARC BRAO TRUE SEMI STRUCT
##
## Ends in an error in state: 175.
##
## body -> body . instr [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## body -> body . local [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
## whilei -> WHILE PARO expr PARC BRAO body . BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## WHILE PARO expr PARC BRAO body
##

Missing left operand on binary operator.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO WHILE PARO TRUE PARC WHILE
##
## Ends in an error in state: 115.
##
## whilei -> WHILE PARO expr PARC . BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## WHILE PARO expr PARC
##

Missing '{' after 'while' condition.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO WHILE PARO TRUE WHILE
##
## Ends in an error in state: 114.
##
## add -> expr . PLUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## and_op -> expr . AND expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## div -> expr . BY expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## eq -> expr . EQEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## geq -> expr . GEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## gth -> expr . GTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## leq -> expr . LEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## lth -> expr . LTH expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mod_op -> expr . MOD expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## mul -> expr . TIMES expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## neq -> expr . NEQ expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## or_op -> expr . OR expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## sub -> expr . MINUS expr [ TIMES PLUS PARC OR NEQ MOD MINUS LTH LEQ GTH GEQ EQEQ BY AND ]
## whilei -> WHILE PARO expr . PARC BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## WHILE PARO expr
##

Unexpected statement inside of an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO WHILE PARO WHILE
##
## Ends in an error in state: 113.
##
## whilei -> WHILE PARO . expr PARC BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## WHILE PARO
##

'while' condition should be an expression.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC BRAO WHILE WHILE
##
## Ends in an error in state: 112.
##
## whilei -> WHILE . PARO expr PARC BRAO body BRAC [ WHILE TYPE TRUE TIMES RETURN PUTCHAR PARO NOT MINUS IF IDENT FALSE CONST BRAC ADDRESS ]
##
## The known suffix of the stack is as follows:
## WHILE
##

Missing '(' after 'while'.

prog: TYPE IDENT SEMI TYPE IDENT PARO PARC WHILE
##
## Ends in an error in state: 110.
##
## func -> struct_type_decl PARO params_opt PARC . BRAO body BRAC [ TYPE IDENT EOF ]
##
## The known suffix of the stack is as follows:
## struct_type_decl PARO params_opt PARC
##

Missing '{' after function declaration.

prog: TYPE IDENT SEMI TYPE IDENT PARO TYPE IDENT COMMA WHILE
##
## Ends in an error in state: 181.
##
## params -> param COMMA . params [ PARC ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

Function parameters should be a declaration (type ident).

prog: TYPE IDENT SEMI TYPE IDENT PARO TYPE IDENT WHILE
##
## Ends in an error in state: 180.
##
## params -> param . [ PARC ]
## params -> param . COMMA params [ PARC ]
##
## The known suffix of the stack is as follows:
## param
##

Parameters should be separated by commas.

prog: TYPE IDENT SEMI TYPE IDENT PARO WHILE
##
## Ends in an error in state: 108.
##
## func -> struct_type_decl PARO . params_opt PARC BRAO body BRAC [ TYPE IDENT EOF ]
##
## The known suffix of the stack is as follows:
## struct_type_decl PARO
##

Function parameters should be a declaration (type ident).

prog: TYPE IDENT SEMI TYPE IDENT WHILE
##
## Ends in an error in state: 190.
##
## glob_var -> decl . opt_const SEMI [ TYPE IDENT ]
## struct_type_decl -> decl . [ PARO ]
##
## The known suffix of the stack is as follows:
## decl
##

Expecting  '(' or ';' or '=' after declaration.

prog: TYPE IDENT SEMI WHILE
##
## Ends in an error in state: 106.
##
## glob_vars -> glob_vars . glob_var [ TYPE IDENT ]
## prog -> structs glob_vars . funcs EOF [ # ]
##
## The known suffix of the stack is as follows:
## structs glob_vars
##

While should be inside a function body.

prog: TYPE IDENT WHILE
##
## Ends in an error in state: 194.
##
## glob_var -> decl . opt_const SEMI [ TYPE IDENT ]
##
## The known suffix of the stack is as follows:
## decl
##

Expecting  '(' or ';' or '=' after declaration.

prog: TYPE TIMES WHILE
##
## Ends in an error in state: 5.
##
## nonempty_list(__anonymous_0) -> TIMES . [ IDENT ]
## nonempty_list(__anonymous_0) -> TIMES . nonempty_list(__anonymous_0) [ IDENT ]
##
## The known suffix of the stack is as follows:
## TIMES
##

Expecting identifier in a variable declaration.

prog: TYPE WHILE
##
## Ends in an error in state: 4.
##
## decl -> TYPE . IDENT [ SEMI PARO PARC EQ COMMA ]
## pointer_decl -> TYPE . nonempty_list(__anonymous_0) IDENT [ SEMI PARO PARC EQ COMMA ]
##
## The known suffix of the stack is as follows:
## TYPE
##

Expecting identifier after type.

prog: WHILE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

While should be inside a function body.

